lab-raft.

# lab-raft

## [6.824](https://pdos.csail.mit.edu/6.824/index.html) - Spring 2020

## 6.824 Lab 2: Raft

### Part 2A Due: Feb 21 23:59

### Part 2B Due: Feb 28 23:59

### Part 2C Due: Mar 6 23:59

### 概述

​		这是`Raft`一系列实验中的第一个，你将在这个实验中构建容错的键/值(`k/v`)系统。在这个`Part 2A`实验中，你将实现一个`Raft`（复制状态机）库，在`Part 2B`实验中，你将在`Raft`之上构建键值服务；然后在`Part 2C`实验中，你将在多个复制状态机使用分片，提高服务性能。

​		`Replecated`服务通过将其状态（既数据）的完整副本存储在多个副本服务器上来实现容错功能。即使运行服务的某些服务器出现故障（比如：宕机，网络故障或不稳定），`Replecated` 也可以使服务继续运行。但是`Replecated`的挑战在于，故障可能导致副本的数据不一致。

​		`Raft`将`Client`请求操作转换为一个可恢复的数据，称之为日志，并确保所有的副本服务看到相同的日志，每个副本都以日志顺序执行客户端请求，并将其应用于服务状态的本地副本。由于所有存活副本都有相同的日志内容，因此它们都以相同的顺序执行相同的请求，因此继续具有相同的服务状态。如果服务器出现故障但后来又恢复了，Raft会确保其日志为最新状态。只要**至少大多数**服务器都处于存活状态并且可以相互通信，`Raft`将继续运行。如果存活达不到大多数，Raft将不会再有效执行，但是一旦存活的机器数量满足大多数条件，它将从中断的地方继续运行。

​		在`Part 2A`实验中，你将用`GO`语言实现`Raft`管理方法，该方法将用作更大服务中的模块。一组`Raft`接口集合将通过`RPC`通信来复制日志，你的`Raft`接口将支持不定编号的命令序列，也称为日志条目`Log Entries`，`Entries`通过

